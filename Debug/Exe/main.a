;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/9/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;unsigned char pwmValue;
;unsigned char buttonCounter = 0;
;
;unsigned char sentLog(unsigned char pwmValueLog);
;
;void main(void)
; 0000 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0022 // Declare your local variables here
; 0000 0023 
; 0000 0024 // Crystal Oscillator division factor: 1
; 0000 0025 #pragma optsize-
; 0000 0026 CLKPR=(1<<CLKPCE);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0027 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028 #ifdef _OPTIMIZE_SIZE_
; 0000 0029 #pragma optsize+
; 0000 002A #endif
; 0000 002B 
; 0000 002C // Input/Output Ports initialization
; 0000 002D // Port B initialization
; 0000 002E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=In
; 0000 002F DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0030 // State: Bit7=T Bit6=T Bit5=P Bit4=P Bit3=P Bit2=0 Bit1=0 Bit0=T
; 0000 0031 PORTB=(0<<PORTB7) | (0<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0032 
; 0000 0033 // Port C initialization
; 0000 0034 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0035 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0036 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=P Bit0=P
; 0000 0037 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0038 
; 0000 0039 // Port D initialization
; 0000 003A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 003B DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 003D PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003E 
; 0000 003F // Timer/Counter 0 initialization
; 0000 0040 // Clock source: System Clock
; 0000 0041 // Clock value: Timer 0 Stopped
; 0000 0042 // Mode: Normal top=0xFF
; 0000 0043 // OC0A output: Disconnected
; 0000 0044 // OC0B output: Disconnected
; 0000 0045 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0046 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0047 TCNT0=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0048 OCR0A=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0049 OCR0B=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004A 
; 0000 004B // Timer/Counter 1 initialization
; 0000 004C // Clock source: System Clock
; 0000 004D // Clock value: 125.000 kHz
; 0000 004E // Mode: Ph. correct PWM top=0x03FF
; 0000 004F // OC1A output: Non-Inverted PWM
; 0000 0050 // OC1B output: Non-Inverted PWM
; 0000 0051 // Noise Canceler: Off
; 0000 0052 // Input Capture on Falling Edge
; 0000 0053 // Timer Period: 16.368 ms
; 0000 0054 // Output Pulse(s):
; 0000 0055 // OC1A Period: 16.368 ms Width: 12.272 ms// OC1B Period: 16.368 ms Width: 0 us
; 0000 0056 // Timer1 Overflow Interrupt: Off
; 0000 0057 // Input Capture Interrupt: Off
; 0000 0058 // Compare A Match Interrupt: Off
; 0000 0059 // Compare B Match Interrupt: Off
; 0000 005A TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (1<<WGM10);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 005B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 005C TCNT1H=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 005D TCNT1L=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 005E ICR1H=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 005F ICR1L=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0060 OCR1AH=0x02;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0061 OCR1AL=0xFF;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0062 OCR1BH=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0063 OCR1BL=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0064 
; 0000 0065 // Timer/Counter 2 initialization
; 0000 0066 // Clock source: System Clock
; 0000 0067 // Clock value: Timer2 Stopped
; 0000 0068 // Mode: Normal top=0xFF
; 0000 0069 // OC2A output: Disconnected
; 0000 006A // OC2B output: Disconnected
; 0000 006B ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 006C TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 006D TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006E TCNT2=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 006F OCR2A=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0070 OCR2B=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0071 
; 0000 0072 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0073 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0074 
; 0000 0075 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0076 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0077 
; 0000 0078 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0079 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 007A 
; 0000 007B // External Interrupt(s) initialization
; 0000 007C // INT0: Off
; 0000 007D // INT1: Off
; 0000 007E // Interrupt on any change on pins PCINT0-7: Off
; 0000 007F // Interrupt on any change on pins PCINT8-14: Off
; 0000 0080 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0081 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0082 EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0083 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0084 
; 0000 0085 // USART initialization
; 0000 0086 // USART disabled
; 0000 0087 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0088 
; 0000 0089 // Analog Comparator initialization
; 0000 008A // Analog Comparator: Off
; 0000 008B // The Analog Comparator's positive input is
; 0000 008C // connected to the AIN0 pin
; 0000 008D // The Analog Comparator's negative input is
; 0000 008E // connected to the AIN1 pin
; 0000 008F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0090 ADCSRB=(0<<ACME);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0091 // Digital input buffer on AIN0: On
; 0000 0092 // Digital input buffer on AIN1: On
; 0000 0093 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0094 
; 0000 0095 // ADC initialization
; 0000 0096 // ADC disabled
; 0000 0097 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0098 
; 0000 0099 // SPI initialization
; 0000 009A // SPI disabled
; 0000 009B SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 009C 
; 0000 009D // TWI initialization
; 0000 009E // TWI disabled
; 0000 009F TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00A0 
; 0000 00A1 while (1)
;PCODE: $00000062 VOL: 0
; 0000 00A2       {
; 0000 00A3           // input from button
; 0000 00A4           if(PINC.0 == 0)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00A5           {
; 0000 00A6             // button 1 to increase the value of motor speed by 100
; 0000 00A7             pwmValue = pwmValue + 100;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A8             buttonCounter++;
;PCODE: $00000069 VOL: 0
; 0000 00A9           }
; 0000 00AA           else if(PINC.1 == 0)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00AB           {
; 0000 00AC           // button 1 to decrease the value of motor speed by 100
; 0000 00AD             pwmValue = pwmValue - 100;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00AE             buttonCounter++;
;PCODE: $00000072 VOL: 0
; 0000 00AF           }
; 0000 00B0 
; 0000 00B1           PORTD.4 = 1;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00B2           PORTD.5 = 0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00B3 
; 0000 00B4           OCR1AL = pwmValue;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00B5 
; 0000 00B6           // check the button press
; 0000 00B7           if(buttonCounter == 10)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00B8           {
; 0000 00B9             // sent the latest value of speed
; 0000 00BA             sentLog(pwmValue);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00BB           }
; 0000 00BC       }
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00BD }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;
;// function to sent via serial
;unsigned char sentLog(unsigned char pwmValueLog)
; 0000 00C1 {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C2     return pwmValueLog;
;PCODE: $00000088 VOL: 0
;	pwmValueLog -> Y+0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C3 }
;PCODE: $0000008C VOL: 0
